<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2Fpost%2F0.html</url>
    <content type="text"><![CDATA[栈应用——简单计算器的实现html {overflow-x: initial !important;}:root { --bg-color:#ffffff; --text-color:#333333; --select-text-bg-color:#B5D6FC; --select-text-font-color:auto; --monospace:"Lucida Console",Consolas,"Courier",monospace; } html { font-size: 14px; background-color: var(--bg-color); color: var(--text-color); font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; } body { margin: 0px; padding: 0px; height: auto; bottom: 0px; top: 0px; left: 0px; right: 0px; font-size: 1rem; line-height: 1.42857; overflow-x: hidden; background: inherit; } iframe { margin: auto; } a.url { word-break: break-all; } a:active, a:hover { outline: 0px; } .in-text-selection, ::selection { text-shadow: none; background: var(--select-text-bg-color); color: var(--select-text-font-color); } #write { margin: 0px auto; height: auto; width: inherit; word-break: normal; word-wrap: break-word; position: relative; white-space: normal; padding-bottom: 70px; overflow-x: visible; } .first-line-indent #write div, .first-line-indent #write li, .first-line-indent #write p { text-indent: 2em; } .first-line-indent #write div :not(p):not(div), .first-line-indent #write div.md-htmlblock-container, .first-line-indent #write p *, .first-line-indent pre { text-indent: 0px; } .for-image #write { padding-left: 8px; padding-right: 8px; } body.typora-export { padding-left: 30px; padding-right: 30px; } @media screen and (max-width: 500px) { body.typora-export { padding-left: 0px; padding-right: 0px; } .CodeMirror-sizer { margin-left: 0px !important; } .CodeMirror-gutters { display: none !important; } } #write > blockquote:first-child, #write > div:first-child, #write > figure:first-child, #write > ol:first-child, #write > p:first-child, #write > pre:first-child, #write > ul:first-child { margin-top: 30px; } #write li > figure:first-child { margin-top: -20px; } #write ol, #write ul { position: relative; } img { max-width: 100%; vertical-align: middle; } button, input, select, textarea { color: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; } input[type="checkbox"], input[type="radio"] { line-height: normal; padding: 0px; } *, ::after, ::before { box-sizing: border-box; } #write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p, #write pre { width: inherit; } #write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p { position: relative; } h1, h2, h3, h4, h5, h6 { break-after: avoid-page; break-inside: avoid; orphans: 2; } p { orphans: 4; } h1 { font-size: 2rem; } h2 { font-size: 1.8rem; } h3 { font-size: 1.6rem; } h4 { font-size: 1.4rem; } h5 { font-size: 1.2rem; } h6 { font-size: 1rem; } .md-math-block, .md-rawblock, h1, h2, h3, h4, h5, h6, p { margin-top: 1rem; margin-bottom: 1rem; } .hidden { display: none; } .md-blockmeta { color: rgb(204, 204, 204); font-weight: 700; font-style: italic; } a { cursor: pointer; } sup.md-footnote { padding: 2px 4px; background-color: rgba(238, 238, 238, 0.7); color: rgb(85, 85, 85); border-radius: 4px; cursor: pointer; } sup.md-footnote a, sup.md-footnote a:hover { color: inherit; text-transform: inherit; text-decoration: inherit; } #write input[type="checkbox"] { cursor: pointer; width: inherit; height: inherit; } figure { overflow-x: auto; margin: 1.2em 0px; max-width: calc(100% + 16px); padding: 0px; } figure > table { margin: 0px !important; } tr { break-inside: avoid; break-after: auto; } thead { display: table-header-group; } table { border-collapse: collapse; border-spacing: 0px; width: 100%; overflow: auto; break-inside: auto; text-align: left; } table.md-table td { min-width: 80px; } .CodeMirror-gutters { border-right: 0px; background-color: inherit; } .CodeMirror { text-align: left; } .CodeMirror-placeholder { opacity: 0.3; } .CodeMirror pre { padding: 0px 4px; } .CodeMirror-lines { padding: 0px; } div.hr:focus { cursor: none; } #write pre { white-space: pre-wrap; } #write.fences-no-line-wrapping pre { white-space: pre; } #write pre.ty-contain-cm { white-space: normal; } .CodeMirror-gutters { margin-right: 4px; } .md-fences { font-size: 0.9rem; display: block; break-inside: avoid; text-align: left; overflow: visible; white-space: pre; background: inherit; position: relative !important; } .md-diagram-panel { width: 100%; margin-top: 10px; text-align: center; padding-top: 0px; padding-bottom: 8px; overflow-x: auto; } #write .md-fences.mock-cm { white-space: pre-wrap; } .md-fences.md-fences-with-lineno { padding-left: 0px; } #write.fences-no-line-wrapping .md-fences.mock-cm { white-space: pre; overflow-x: auto; } .md-fences.mock-cm.md-fences-with-lineno { padding-left: 8px; } .CodeMirror-line, twitterwidget { break-inside: avoid; } .footnotes { opacity: 0.8; font-size: 0.9rem; margin-top: 1em; margin-bottom: 1em; } .footnotes + .footnotes { margin-top: 0px; } .md-reset { margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: top; background: 0px 0px; text-decoration: none; text-shadow: none; float: none; position: static; width: auto; height: auto; white-space: nowrap; cursor: inherit; -webkit-tap-highlight-color: transparent; line-height: normal; font-weight: 400; text-align: left; box-sizing: content-box; direction: ltr; } li div { padding-top: 0px; } blockquote { margin: 1rem 0px; } li .mathjax-block, li p { margin: 0.5rem 0px; } li { margin: 0px; position: relative; } blockquote > :last-child { margin-bottom: 0px; } blockquote > :first-child, li > :first-child { margin-top: 0px; } .footnotes-area { color: rgb(136, 136, 136); margin-top: 0.714rem; padding-bottom: 0.143rem; white-space: normal; } #write .footnote-line { white-space: pre-wrap; } @media print { body, html { border: 1px solid transparent; height: 99%; break-after: avoid; break-before: avoid; } #write { margin-top: 0px; border-color: transparent !important; } .typora-export * { -webkit-print-color-adjust: exact; } html.blink-to-pdf { font-size: 13px; } .typora-export #write { padding-left: 1cm; padding-right: 1cm; padding-bottom: 0px; break-after: avoid; } .typora-export #write::after { height: 0px; } @page { margin: 20mm 0px; } } .footnote-line { margin-top: 0.714em; font-size: 0.7em; } a img, img a { cursor: pointer; } pre.md-meta-block { font-size: 0.8rem; min-height: 0.8rem; white-space: pre-wrap; background: rgb(204, 204, 204); display: block; overflow-x: hidden; } p > img:only-child { display: block; margin: auto; } p > .md-image:only-child { display: inline-block; width: 100%; text-align: center; } #write .MathJax_Display { margin: 0.8em 0px 0px; } .md-math-block { width: 100%; } .md-math-block:not(:empty)::after { display: none; } [contenteditable="true"]:active, [contenteditable="true"]:focus { outline: 0px; box-shadow: none; } .md-task-list-item { position: relative; list-style-type: none; } .task-list-item.md-task-list-item { padding-left: 0px; } .md-task-list-item > input { position: absolute; top: 0px; left: 0px; margin-left: -1.2em; margin-top: calc(1em - 10px); } .math { font-size: 1rem; } .md-toc { min-height: 3.58rem; position: relative; font-size: 0.9rem; border-radius: 10px; } .md-toc-content { position: relative; margin-left: 0px; } .md-toc-content::after, .md-toc::after { display: none; } .md-toc-item { display: block; color: rgb(65, 131, 196); } .md-toc-item a { text-decoration: none; } .md-toc-inner:hover { } .md-toc-inner { display: inline-block; cursor: pointer; } .md-toc-h1 .md-toc-inner { margin-left: 0px; font-weight: 700; } .md-toc-h2 .md-toc-inner { margin-left: 2em; } .md-toc-h3 .md-toc-inner { margin-left: 4em; } .md-toc-h4 .md-toc-inner { margin-left: 6em; } .md-toc-h5 .md-toc-inner { margin-left: 8em; } .md-toc-h6 .md-toc-inner { margin-left: 10em; } @media screen and (max-width: 48em) { .md-toc-h3 .md-toc-inner { margin-left: 3.5em; } .md-toc-h4 .md-toc-inner { margin-left: 5em; } .md-toc-h5 .md-toc-inner { margin-left: 6.5em; } .md-toc-h6 .md-toc-inner { margin-left: 8em; } } a.md-toc-inner { font-size: inherit; font-style: inherit; font-weight: inherit; line-height: inherit; } .footnote-line a:not(.reversefootnote) { color: inherit; } .md-attr { display: none; } .md-fn-count::after { content: "."; } code, pre, samp, tt { font-family: var(--monospace); } kbd { margin: 0px 0.1em; padding: 0.1em 0.6em; font-size: 0.8em; color: rgb(36, 39, 41); background: rgb(255, 255, 255); border: 1px solid rgb(173, 179, 185); border-radius: 3px; box-shadow: rgba(12, 13, 14, 0.2) 0px 1px 0px, rgb(255, 255, 255) 0px 0px 0px 2px inset; white-space: nowrap; vertical-align: middle; } .md-comment { color: rgb(162, 127, 3); opacity: 0.8; font-family: var(--monospace); } code { text-align: left; vertical-align: initial; } a.md-print-anchor { white-space: pre !important; border-width: initial !important; border-style: none !important; border-color: initial !important; display: inline-block !important; position: absolute !important; width: 1px !important; right: 0px !important; outline: 0px !important; background: 0px 0px !important; text-decoration: initial !important; text-shadow: initial !important; } .md-inline-math .MathJax_SVG .noError { display: none !important; } .md-math-block .MathJax_SVG_Display { text-align: center; margin: 0px; position: relative; text-indent: 0px; max-width: none; max-height: none; min-height: 0px; min-width: 100%; width: auto; overflow-y: hidden; display: block !important; } .MathJax_SVG_Display, .md-inline-math .MathJax_SVG_Display { width: auto; margin: inherit; display: inline-block !important; } .MathJax_SVG .MJX-monospace { font-family: var(--monospace); } .MathJax_SVG .MJX-sans-serif { font-family: sans-serif; } .MathJax_SVG { display: inline; font-style: normal; font-weight: 400; line-height: normal; zoom: 90%; text-indent: 0px; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0px; min-height: 0px; border: 0px; padding: 0px; margin: 0px; } .MathJax_SVG * { transition: none; } .MathJax_SVG_Display svg { vertical-align: middle !important; margin-bottom: 0px !important; } .os-windows.monocolor-emoji .md-emoji { font-family: "Segoe UI Symbol", sans-serif; } .md-diagram-panel > svg { max-width: 100%; } [lang="mermaid"] svg, [lang="flow"] svg { max-width: 100%; } [lang="mermaid"] .node text { font-size: 1rem; } table tr th { border-bottom: 0px; } video { max-width: 100%; display: block; margin: 0px auto; } iframe { max-width: 100%; width: 100%; border: none; } .highlight td, .highlight tr { border: 0px; } .CodeMirror { height: auto; } .CodeMirror.cm-s-inner { background: inherit; } .CodeMirror-scroll { overflow-y: hidden; overflow-x: auto; z-index: 3; } .CodeMirror-gutter-filler, .CodeMirror-scrollbar-filler { background-color: rgb(255, 255, 255); } .CodeMirror-gutters { border-right: 1px solid rgb(221, 221, 221); background: inherit; white-space: nowrap; } .CodeMirror-linenumber { padding: 0px 3px 0px 5px; text-align: right; color: rgb(153, 153, 153); } .cm-s-inner .cm-keyword { color: rgb(119, 0, 136); } .cm-s-inner .cm-atom, .cm-s-inner.cm-atom { color: rgb(34, 17, 153); } .cm-s-inner .cm-number { color: rgb(17, 102, 68); } .cm-s-inner .cm-def { color: rgb(0, 0, 255); } .cm-s-inner .cm-variable { color: rgb(0, 0, 0); } .cm-s-inner .cm-variable-2 { color: rgb(0, 85, 170); } .cm-s-inner .cm-variable-3 { color: rgb(0, 136, 85); } .cm-s-inner .cm-string { color: rgb(170, 17, 17); } .cm-s-inner .cm-property { color: rgb(0, 0, 0); } .cm-s-inner .cm-operator { color: rgb(152, 26, 26); } .cm-s-inner .cm-comment, .cm-s-inner.cm-comment { color: rgb(170, 85, 0); } .cm-s-inner .cm-string-2 { color: rgb(255, 85, 0); } .cm-s-inner .cm-meta { color: rgb(85, 85, 85); } .cm-s-inner .cm-qualifier { color: rgb(85, 85, 85); } .cm-s-inner .cm-builtin { color: rgb(51, 0, 170); } .cm-s-inner .cm-bracket { color: rgb(153, 153, 119); } .cm-s-inner .cm-tag { color: rgb(17, 119, 0); } .cm-s-inner .cm-attribute { color: rgb(0, 0, 204); } .cm-s-inner .cm-header, .cm-s-inner.cm-header { color: rgb(0, 0, 255); } .cm-s-inner .cm-quote, .cm-s-inner.cm-quote { color: rgb(0, 153, 0); } .cm-s-inner .cm-hr, .cm-s-inner.cm-hr { color: rgb(153, 153, 153); } .cm-s-inner .cm-link, .cm-s-inner.cm-link { color: rgb(0, 0, 204); } .cm-negative { color: rgb(221, 68, 68); } .cm-positive { color: rgb(34, 153, 34); } .cm-header, .cm-strong { font-weight: 700; } .cm-del { text-decoration: line-through; } .cm-em { font-style: italic; } .cm-link { text-decoration: underline; } .cm-error { color: red; } .cm-invalidchar { color: red; } .cm-constant { color: rgb(38, 139, 210); } .cm-defined { color: rgb(181, 137, 0); } div.CodeMirror span.CodeMirror-matchingbracket { color: rgb(0, 255, 0); } div.CodeMirror span.CodeMirror-nonmatchingbracket { color: rgb(255, 34, 34); } .cm-s-inner .CodeMirror-activeline-background { background: inherit; } .CodeMirror { position: relative; overflow: hidden; } .CodeMirror-scroll { height: 100%; outline: 0px; position: relative; box-sizing: content-box; background: inherit; } .CodeMirror-sizer { position: relative; } .CodeMirror-gutter-filler, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-vscrollbar { position: absolute; z-index: 6; display: none; } .CodeMirror-vscrollbar { right: 0px; top: 0px; overflow: hidden; } .CodeMirror-hscrollbar { bottom: 0px; left: 0px; overflow: hidden; } .CodeMirror-scrollbar-filler { right: 0px; bottom: 0px; } .CodeMirror-gutter-filler { left: 0px; bottom: 0px; } .CodeMirror-gutters { position: absolute; left: 0px; top: 0px; padding-bottom: 30px; z-index: 3; } .CodeMirror-gutter { white-space: normal; height: 100%; box-sizing: content-box; padding-bottom: 30px; margin-bottom: -32px; display: inline-block; } .CodeMirror-gutter-wrapper { position: absolute; z-index: 4; background: 0px 0px !important; border: none !important; } .CodeMirror-gutter-background { position: absolute; top: 0px; bottom: 0px; z-index: 4; } .CodeMirror-gutter-elt { position: absolute; cursor: default; z-index: 4; } .CodeMirror-lines { cursor: text; } .CodeMirror pre { border-radius: 0px; border-width: 0px; background: 0px 0px; font-family: inherit; font-size: inherit; margin: 0px; white-space: pre; word-wrap: normal; color: inherit; z-index: 2; position: relative; overflow: visible; } .CodeMirror-wrap pre { word-wrap: break-word; white-space: pre-wrap; word-break: normal; } .CodeMirror-code pre { border-right: 30px solid transparent; width: fit-content; } .CodeMirror-wrap .CodeMirror-code pre { border-right: none; width: auto; } .CodeMirror-linebackground { position: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px; z-index: 0; } .CodeMirror-linewidget { position: relative; z-index: 2; overflow: auto; } .CodeMirror-wrap .CodeMirror-scroll { overflow-x: hidden; } .CodeMirror-measure { position: absolute; width: 100%; height: 0px; overflow: hidden; visibility: hidden; } .CodeMirror-measure pre { position: static; } .CodeMirror div.CodeMirror-cursor { position: absolute; visibility: hidden; border-right: none; width: 0px; } .CodeMirror div.CodeMirror-cursor { visibility: hidden; } .CodeMirror-focused div.CodeMirror-cursor { visibility: inherit; } .cm-searching { background: rgba(255, 255, 0, 0.4); } @media print { .CodeMirror div.CodeMirror-cursor { visibility: hidden; } } :root { --active-file-bg-color: rgba(32, 43, 51, 0.63); --active-file-text-color: white; --bg-color: #fff; --text-color: #333; --side-bar-bg-color: #f5f5f5; --control-text-color: #666; } html { color: rgb(51, 51, 51); background: rgb(255, 255, 255); text-size-adjust: 100%; text-rendering: optimizeLegibility; font-size: 14px; -webkit-font-smoothing: initial; } #write { max-width: 960px; padding-top: 2em; padding-left: 60px; padding-right: 60px; min-height: calc(100vh - 6em); -webkit-font-smoothing: antialiased; font-size: 16px; } .typora-node #write { min-height: calc(100% - 6em); } pre.md-meta-block { background: rgb(245, 245, 245); padding: 1em; border-radius: 3px; font-size: 14px; } @media screen and (max-width: 800px) { html { font-size: 14px; } #write { padding-left: 30px; padding-right: 30px; font-size: 14px; } } @media screen and (min-width: 1100px) { body, #footer-word-count-info { background: rgb(245, 245, 245); } body.pin-outline, .pin-outline #footer-word-count-info, .pin-outline footer { background: rgb(255, 255, 255); } #write { max-width: 1000px; padding: 40px 60px; background: rgb(255, 255, 255); margin: 3em auto; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; border-width: 0px 1px; } .pin-outline #write { max-width: 1000px; background: rgb(255, 255, 255); margin: 0px; border: 0px; padding-left: 60px; padding-right: 60px; } footer { background-color: transparent; } } @media screen and (min-width: 1300px) { body.pin-outline, .pin-outline #footer-word-count-info, .pin-outline footer { background: rgb(245, 245, 245); } .pin-outline #write { max-width: 1000px; padding: 40px 60px; background: rgb(255, 255, 255); margin: 3em auto; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial; border-width: 0px 1px; } .pin-outline footer { background-color: transparent; } #footer-word-count-info { background: rgb(245, 245, 245); } } html.borderbox *, html.borderbox ::before, html.borderbox ::after { box-sizing: border-box; } body, dl, dt, dd, ul, ol, li, h1, h2, h3, h4, h5, h6, code, form, fieldset, legend, input, textarea, p, blockquote, th, td, hr, button, article, aside, details, figcaption, figure, footer, header, menu, nav, section { margin: 0px; padding: 0px; } article, aside, details, figcaption, figure, footer, header, menu, nav, section { display: block; } audio, canvas, video { display: inline-block; } body, button, input, select, textarea { font-style: normal; font-variant: normal; font-weight: 300; font-stretch: normal; font-size: 1em; line-height: 1.8; font-family: "PingFang SC", "Lantinghei SC", "Microsoft Yahei", "Hiragino Sans GB", "Microsoft Sans Serif", "WenQuanYi Micro Hei", sans; } body { font-family: "PingFang SC", "Lantinghei SC", "Microsoft Yahei", "Hiragino Sans GB", "Microsoft Sans Serif", "WenQuanYi Micro Hei", sans; } h1, h2, h3, h4, h5, h6 { font-family: TimesNewRomanPS-ItalicMT, "PingFang SC", "Lantinghei SC", "Microsoft Yahei", "Hiragino Sans GB", "Microsoft Sans Serif", "WenQuanYi Micro Hei", sans; -webkit-font-smoothing: initial; font-weight: 100; color: var(--text-color); line-height: 1.35; font-variant-numeric: lining-nums; margin-bottom: 1em; } em { font-family: Georgia-Italic, STSongti-SC-Light, serif; } strong em, em strong { font-family: Georgia-BoldItalic, STSongti-SC-Regular, serif; } table { border-collapse: collapse; border-spacing: 0px; } fieldset, img { border: 0px; } blockquote { position: relative; color: rgb(153, 153, 153); font-weight: 400; border-left: 1px solid rgb(26, 188, 156); padding-left: 1em; margin: 1em 3em 1em 2em; } @media only screen and (max-width: 640px) { blockquote { margin: 1em 0px; } } acronym, abbr { border-bottom: 1px dotted; font-variant-ligatures: normal; font-variant-caps: normal; } abbr { cursor: help; } address, caption, cite, code, dfn, th, var { font-style: normal; font-weight: 400; } ul, ol { list-style: none; } caption, th { text-align: left; } q::before, q::after { content: ""; } sub, sup { font-size: 75%; line-height: 0; position: relative; } :root sub, :root sup { vertical-align: baseline; } sup { top: -0.5em; } sub { bottom: -0.25em; } a { color: rgb(26, 188, 156); } a:hover { text-decoration: underline; } #write a { border-bottom: 1px solid rgb(26, 188, 156); } #write a:hover { border-bottom-color: rgb(85, 85, 85); color: rgb(85, 85, 85); text-decoration: none; } ins, a { text-decoration: none; } mark { background: rgb(255, 253, 209); border-bottom: 1px solid rgb(255, 237, 206); padding: 2px; margin: 0px 5px; } pre, code, pre tt { font-family: Courier, "Courier New", monospace; } #write .md-fences { border: 1px solid rgb(221, 221, 221); padding: 1em 0.5em; display: block; } hr { border-top: none; border-right: none; border-left: none; border-image: initial; border-bottom: 1px solid rgb(207, 207, 207); margin-bottom: 0.8em; height: 10px; } #write strong { font-weight: bolder; color: rgb(0, 0, 0); } .code-tooltip.md-hover-tip strong { color: white; } #write p, #write .md-fences, #write ul, #write ol, #write dl, #write form, #write hr, #write figure, #write-p, #write-pre, #write-ul, #write-ol, #write-dl, #write-form, #write-hr, #write-table, blockquote { margin-bottom: 1.2em; } html { font-family: "PingFang SC", Verdana, "Helvetica Neue", "Microsoft Yahei", "Hiragino Sans GB", "Microsoft Sans Serif", "WenQuanYi Micro Hei", sans-serif; } #write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write-h1, #write-h2, #write-h3, #write-h4, #write-h5, #write-h6 { margin-top: 1.2em; margin-bottom: 0.6em; line-height: 1.35; color: rgb(0, 0, 0); } #write h1, #write-h1 { font-size: 2.4em; padding-bottom: 1em; border-bottom: 3px double rgb(238, 238, 238); } #write h2, #write-h2 { font-size: 1.8em; } #write h3, #write-h3 { font-size: 1.6em; } #write h4, #write-h4 { font-size: 1.4em; } #write h5, #write h6, #write-h5, #write-h6 { font-size: 1.2em; } #write ul, #write-ul { margin-left: 1.3em; list-style: disc; } #write ol, #write-ol { list-style: decimal; margin-left: 1.9em; } #write li ul, #write li ol, #write-ul ul, #write-ul ol, #write-ol ul, #write-ol ol { margin-bottom: 0.8em; margin-left: 2em; } #write li ul, #write-ul ul, #write-ol ul { list-style: circle; } #write table th, #write table td { border: 1px solid rgb(221, 221, 221); padding: 0.5em 1em; color: rgb(102, 102, 102); } #write table .md-table-edit th { border: none; padding: 0px; color: inherit; } #write table th, #write-table th { background: rgb(251, 251, 251); } #write table thead th, #write-table thead th { background: rgb(241, 241, 241); } #write table caption { border-bottom: none; } #write em { font-weight: inherit; font-style: inherit; } li > p { margin-bottom: 0px !important; } #write img { max-width: 100%; } a.md-toc-inner { border-bottom: 0px !important; } .md-toc-h1:first-of-type:last-of-type { display: none; } .md-toc { font-size: inherit; } .md-toc-h1 .md-toc-inner { font-weight: normal; } .md-table-edit th { padding: 0px !important; border: 0px !important; } .mac-seamless-mode #write { min-height: calc((100vh - 6em) - 20px); } .typora-quick-open-item.active { color: var(--active-file-text-color); } .in-text-selection, ::selection { background: var(--active-file-bg-color); text-shadow: none; color: white; } .btn-primary { background-color: rgb(45, 45, 45); border-color: rgb(2, 2, 2); } .btn-primary:hover, .btn-primary:focus, .btn-primary.focus, .btn-primary:active, .btn-primary.active, .open > .dropdown-toggle.btn-primary { background-color: rgb(78, 76, 78); border: rgb(78, 76, 78); } #preference-dialog .modal-content { background: rgb(110, 117, 122); --bg-color: #6e757a; --text-color: #f1f1f1; color: rgb(241, 241, 241); } #typora-source, .typora-sourceview-on { --bg-color: #eee; background: rgb(238, 238, 238); } .cm-s-typora-default .cm-header, .cm-s-typora-default .cm-property { color: rgb(17, 96, 152); } .cm-s-typora-default .cm-link { color: rgb(17, 152, 125); } .cm-s-typora-default .cm-em { font-family: Georgia-Italic, STSongti-SC-Light, serif; color: rgb(111, 100, 0); } .cm-s-typora-default .cm-em { color: rgb(0, 22, 45); } .CodeMirror.cm-s-typora-default div.CodeMirror-cursor { border-left: 3px solid rgb(110, 117, 122); } .cm-s-typora-default .CodeMirror-selectedtext, .typora-sourceview-on .CodeMirror-focused .CodeMirror-selected { background: rgb(110, 117, 122); color: white; } .file-node-icon.fa.fa-folder::before { color: rgba(32, 43, 51, 0.49); } #preference-dialog .megamenu-menu-panel h1 { margin-bottom: 1em; } ::-webkit-scrollbar-corner { display: none; background: transparent; } .typora-export p, .typora-export .footnote-line {white-space: normal;} 用栈实现一个简单的计算器 栈的定义和操作： 堆栈是一个线性表，插入和删除只在表的一端进行。这一端称为栈顶(Stack Top)，另一端则为栈底(Stack Bottom)。 堆栈的元素插入称为入栈，元素的删除称为出栈。由于元素的入栈和出栈总在栈顶进行，因此，堆栈是一个后进先 出(Last In First Out)表，即 LIFO 表。栈的基本操作有：empty();//判断是否空栈push();//推进pop();//弹出top();//返回顶端的值&nbsp; 计算器实现原理： 用一个数字栈保存数字，用一个符号栈保存操作符。当读到的操作符比栈顶的操作符优先级低时，就取出栈顶的操作符和运算数进行运算，再把运算数压到数字栈中。优先级为：（ &lt; + = - &lt; * = / &lt; ）Leetcode原题：基本计算器代码：​x1class Solution {2public:3 &nbsp; &nbsp;bool isNum(char c){4 &nbsp; &nbsp; &nbsp; &nbsp;if('0'&lt;=c&amp;&amp;c&lt;='9') return true;5 &nbsp; &nbsp; &nbsp; &nbsp;else return false;6 &nbsp; }7 &nbsp; &nbsp;void show(stack&lt;int&gt; s){8 &nbsp; &nbsp; &nbsp; &nbsp;while(!s.empty()){9 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cout&lt;&lt;s.top();10 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;s.pop();11 &nbsp; &nbsp; &nbsp; }12 &nbsp; &nbsp; &nbsp; &nbsp;cout&lt;&lt;endl;13 &nbsp; }14 &nbsp; &nbsp;void operat(stack&lt;int&gt;&amp;numS,stack&lt;char&gt;&amp;chS){15 &nbsp;16 &nbsp; &nbsp; &nbsp; &nbsp;char op=chS.top();17 &nbsp; &nbsp; &nbsp; &nbsp;chS.pop();18 &nbsp; &nbsp; &nbsp; &nbsp;int num1,num2;19 &nbsp; &nbsp; &nbsp; &nbsp;num2=numS.top();20 &nbsp; &nbsp; &nbsp; &nbsp;numS.pop();21 &nbsp; &nbsp; &nbsp; &nbsp;num1=numS.top();22 &nbsp; &nbsp; &nbsp; &nbsp;numS.pop();23 &nbsp; &nbsp; &nbsp; &nbsp;switch(op){24 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case '+':numS.push(num1+num2);break;25 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case '-':numS.push(num1-num2);break;26 &nbsp; &nbsp; &nbsp; }27​28 &nbsp; }29 &nbsp; &nbsp;int calculate(string s) {30 &nbsp; &nbsp; &nbsp; &nbsp;int ans=0;31 &nbsp; &nbsp; &nbsp; &nbsp;int num=0,flag=1;32 &nbsp; &nbsp; &nbsp; &nbsp;stack&lt;int&gt; numS;33 &nbsp; &nbsp; &nbsp; &nbsp;stack&lt;char&gt; chS;34 &nbsp; &nbsp; &nbsp; &nbsp;for(int i=0,l=s.length();i&lt;l;i++){35 &nbsp; &nbsp;// &nbsp; &nbsp; &nbsp; show(numS);36 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(isNum(s[i])){37 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(s[i]=='0'&amp;&amp;num==0) numS.push(0);38 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;else num=num*10+s[i]-'0';39 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }else{40 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(num!=0){41 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;numS.push(num);42 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;num=0;43 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }44 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(s[i]=='+'||s[i]=='-'){45 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;while(!chS.empty()&amp;&amp;chS.top()!='(')46 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;operat(numS,chS);47 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;chS.push(s[i]);48 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }else if(s[i]==')'){49 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;while(!chS.empty()&amp;&amp;chS.top()!='(')50 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;operat(numS,chS);51 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(!chS.empty()) chS.pop();52 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;53 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }else if(s[i]=='(') chS.push(s[i]);54 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }55 &nbsp; &nbsp; &nbsp; }56 &nbsp; &nbsp; &nbsp; &nbsp;if(num!=0) numS.push(num);57 &nbsp; &nbsp; &nbsp; &nbsp;if(!chS.empty()) &nbsp;operat(numS,chS);58​59 &nbsp; &nbsp; &nbsp; &nbsp;return numS.top();60​61 &nbsp; }62};&nbsp;对上题修改，设计一个能进行加减乘除的计算器。xxxxxxxxxx761#include&lt;iostream&gt;2#include&lt;stack&gt;3using namespace std;4bool isNum(char c){5 &nbsp; &nbsp;if('0'&lt;=c&amp;&amp;c&lt;='9') return true;6 &nbsp; &nbsp;else return false;7}8void show(stack&lt;int&gt; s){9 &nbsp; &nbsp;while(!s.empty()){10 &nbsp; &nbsp; &nbsp; &nbsp;cout&lt;&lt;s.top();11 &nbsp; &nbsp; &nbsp; &nbsp;s.pop();12 &nbsp; }13 &nbsp; &nbsp;cout&lt;&lt;endl;14}15void operat(stack&lt;int&gt;&amp;numS,stack&lt;char&gt;&amp;chS){16 &nbsp; &nbsp;char op=chS.top();17 &nbsp; &nbsp;chS.pop();18 &nbsp; &nbsp;int num1,num2;19 &nbsp; &nbsp;num2=numS.top();20 &nbsp; &nbsp;numS.pop();21 &nbsp; &nbsp;num1=numS.top();22 &nbsp; &nbsp;numS.pop();23 &nbsp; &nbsp;switch(op){24 &nbsp; case '*':numS.push(num1*num2);break;25 case '/':if(num2==0){26 cout&lt;&lt;"nan"&lt;&lt;endl;27 exit(0);28 } 29 else numS.push(num1/num2);break;30 &nbsp; &nbsp; &nbsp; &nbsp;case '+':numS.push(num1+num2);break;31 &nbsp; &nbsp; &nbsp; &nbsp;case '-':numS.push(num1-num2);break;32 &nbsp; }33}34int calculate(string s) {35 &nbsp; &nbsp;int ans=0;36 &nbsp; &nbsp;int num=0,flag=1;37 &nbsp; &nbsp;stack&lt;int&gt; numS;38 &nbsp; &nbsp;stack&lt;char&gt; chS;39 &nbsp; &nbsp;for(int i=0,l=s.length();i&lt;l;i++){40 &nbsp; &nbsp; &nbsp; &nbsp;//show(numS);41 &nbsp; if(isNum(s[i])){42 &nbsp; &nbsp; &nbsp; if(s[i]=='0'&amp;&amp;num==0) numS.push(0);43 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;else num=num*10+s[i]-'0';44 &nbsp; &nbsp; &nbsp; }else{45 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(num!=0){46 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;numS.push(num);47 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;num=0;48 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }49 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(s[i]=='*'||s[i]=='/'){50 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while(!chS.empty()&amp;&amp;chS.top()!='('&amp;&amp;chS.top()!='+'&amp;&amp;chS.top()!='-')51 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;operat(numS,chS);52 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;chS.push(s[i]);53 }else if(s[i]=='+'||s[i]=='-'){54 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;while(!chS.empty()&amp;&amp;chS.top()!='(')55 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;operat(numS,chS);56 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;chS.push(s[i]);57 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }else if(s[i]==')'){58 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;while(!chS.empty()&amp;&amp;chS.top()!='(')59 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;operat(numS,chS);60 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(!chS.empty()) chS.pop();61 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;62 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }else if(s[i]=='(') chS.push(s[i]);63 &nbsp; }64 &nbsp; }65 &nbsp; &nbsp;if(num!=0) numS.push(num);66 &nbsp; &nbsp;while(!chS.empty()) &nbsp;operat(numS,chS);67 &nbsp; &nbsp;return numS.top();68}69int main(){70 string s;71 while(getline(cin,s,'\n')){72 cout&lt;&lt;calculate(s)&lt;&lt;endl;73 }74 return 0;75} 76​&nbsp;缺点：只能进行整数的加减，只要修改栈的类型即可解决。&nbsp;]]></content>
  </entry>
  <entry>
    <title><![CDATA[栈应用——简单计算器的实现]]></title>
    <url>%2Fpost%2F4404c848.html</url>
    <content type="text"><![CDATA[用栈实现一个简单的计算器 栈的定义和操作： 堆栈是一个线性表，插入和删除只在表的一端进行。这一端称为栈顶(Stack Top)，另一端则为栈底(Stack Bottom)。堆栈的元素插入称为入栈，元素的删除称为出栈。由于元素的入栈和出栈总在栈顶进行，因此，堆栈是一个后进先出(Last In First Out)表，即 LIFO 表。 栈的基本操作有： empty();//判断是否空栈 push();//推进 pop();//弹出 top();//返回顶端的值 计算器实现原理： 用一个数字栈保存数字，用一个符号栈保存操作符。当读到的操作符比栈顶的操作符优先级低时，就取出栈顶的操作符和运算数进行运算，再把运算数压到数字栈中。 优先级为：（ &lt; + = - &lt; * = / &lt; ） Leetcode原题：基本计算器 代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162class Solution &#123;public: bool isNum(char c)&#123; if('0'&lt;=c&amp;&amp;c&lt;='9') return true; else return false; &#125; void show(stack&lt;int&gt; s)&#123; while(!s.empty())&#123; cout&lt;&lt;s.top(); s.pop(); &#125; cout&lt;&lt;endl; &#125; void operat(stack&lt;int&gt;&amp;numS,stack&lt;char&gt;&amp;chS)&#123; char op=chS.top(); chS.pop(); int num1,num2; num2=numS.top(); numS.pop(); num1=numS.top(); numS.pop(); switch(op)&#123; case '+':numS.push(num1+num2);break; case '-':numS.push(num1-num2);break; &#125; &#125; int calculate(string s) &#123; int ans=0; int num=0,flag=1; stack&lt;int&gt; numS; stack&lt;char&gt; chS; for(int i=0,l=s.length();i&lt;l;i++)&#123; // show(numS); if(isNum(s[i]))&#123; if(s[i]=='0'&amp;&amp;num==0) numS.push(0); else num=num*10+s[i]-'0'; &#125;else&#123; if(num!=0)&#123; numS.push(num); num=0; &#125; if(s[i]=='+'||s[i]=='-')&#123; while(!chS.empty()&amp;&amp;chS.top()!='(') operat(numS,chS); chS.push(s[i]); &#125;else if(s[i]==')')&#123; while(!chS.empty()&amp;&amp;chS.top()!='(') operat(numS,chS); if(!chS.empty()) chS.pop(); &#125;else if(s[i]=='(') chS.push(s[i]); &#125; &#125; if(num!=0) numS.push(num); if(!chS.empty()) operat(numS,chS); return numS.top(); &#125;&#125;; 对上题修改，设计一个能进行加减乘除的计算器。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include&lt;iostream&gt;#include&lt;stack&gt;using namespace std;bool isNum(char c)&#123; if('0'&lt;=c&amp;&amp;c&lt;='9') return true; else return false;&#125;void show(stack&lt;int&gt; s)&#123; while(!s.empty())&#123; cout&lt;&lt;s.top(); s.pop(); &#125; cout&lt;&lt;endl;&#125;void operat(stack&lt;int&gt;&amp;numS,stack&lt;char&gt;&amp;chS)&#123; char op=chS.top(); chS.pop(); int num1,num2; num2=numS.top(); numS.pop(); num1=numS.top(); numS.pop(); switch(op)&#123; case '*':numS.push(num1*num2);break; case '/':if(num2==0)&#123; cout&lt;&lt;"nan"&lt;&lt;endl; exit(0); &#125; else numS.push(num1/num2);break; case '+':numS.push(num1+num2);break; case '-':numS.push(num1-num2);break; &#125;&#125;int calculate(string s) &#123; int ans=0; int num=0,flag=1; stack&lt;int&gt; numS; stack&lt;char&gt; chS; for(int i=0,l=s.length();i&lt;l;i++)&#123; //show(numS); if(isNum(s[i]))&#123; if(s[i]=='0'&amp;&amp;num==0) numS.push(0); else num=num*10+s[i]-'0'; &#125;else&#123; if(num!=0)&#123; numS.push(num); num=0; &#125; if(s[i]=='*'||s[i]=='/')&#123; while(!chS.empty()&amp;&amp;chS.top()!='('&amp;&amp;chS.top()!='+'&amp;&amp;chS.top()!='-') operat(numS,chS); chS.push(s[i]); &#125;else if(s[i]=='+'||s[i]=='-')&#123; while(!chS.empty()&amp;&amp;chS.top()!='(') operat(numS,chS); chS.push(s[i]); &#125;else if(s[i]==')')&#123; while(!chS.empty()&amp;&amp;chS.top()!='(') operat(numS,chS); if(!chS.empty()) chS.pop(); &#125;else if(s[i]=='(') chS.push(s[i]); &#125; &#125; if(num!=0) numS.push(num); while(!chS.empty()) operat(numS,chS); return numS.top();&#125;int main()&#123; string s; while(getline(cin,s,'\n'))&#123; cout&lt;&lt;calculate(s)&lt;&lt;endl; &#125; return 0;&#125; 缺点：只能进行整数的加减，只要修改栈的类型即可解决。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html学习总结]]></title>
    <url>%2Fpost%2F5be4bf9f.html</url>
    <content type="text"><![CDATA[HTML的常见用法总结： 常用标签： 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 标题： 12345678//代码：&lt;h1&gt;一级标题&lt;/h1&gt;&lt;h2&gt;二级标题&lt;/h2&gt;&lt;h3&gt;三级标题&lt;/h3&gt;&lt;h4&gt;四级标题&lt;/h4&gt;&lt;h5&gt;五级标题&lt;/h5&gt;&lt;h6&gt;六级标题&lt;/h6&gt; 段落： 12345//代码：&lt;p&gt;这是段落。&lt;/p&gt;&lt;p&gt;会换行。&lt;/p&gt;换行&lt;/br&gt; 图片： 123456789//代码：&lt;img src="",title="",height="",width="",alt=""&gt;//src="";引号中间接图片地址//title="";引号中间接标题//height="";图片的高度//width="";图片的宽度//alt="";无法显示图片时 链接： 1234567//代码： &lt;a href=""&gt;name&lt;/a&gt; //hred="";引号中间为链接地址//name处为名称//常见作用：跳转，瞄（当href=“#某个标签的id”时，就可以跳转） 表格： 1234567891011121314//代码：&lt;table&gt; &lt;tr&gt; &lt;th&gt;&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;//tr表示行//th表示头标题//td表示单元格]]></content>
  </entry>
  <entry>
    <title><![CDATA[vector总结（三）]]></title>
    <url>%2Fpost%2F67a66973.html</url>
    <content type="text"><![CDATA[实现一个vector类 框架来自邓俊辉老师的例子：vector.h 具体实现： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190template&lt;typename T&gt;class myVector&#123; T *_data; int _size; void copyFrom(T const *A,int lo,int hi);//复制数组区间 void expand();//空间不足时扩容 void shrink();//装填因子过小时压缩 public: myVector(int =0,T =0); myVector(const T *A,int lo,int hi); myVector(const myVector&lt;T&gt; &amp;mv); int size() const;//报告向量当前的规模（元素总数） T get(int r) const;//获取秩为r的元素 void put(int r,T e);//用e替换秩为r元素的数值 void insert(int r,T e);//插入元素 T remove(int r);//删除秩为r的元素 int remove(int lo,int hi);//删除秩在区间[lo, hi]之内的元素 bool disortered() const;//判断向量是否已排序 void sort();//调整各元素的位置，使之按非降序排列 int find(T e) const;//无序向量整体查找 int search(T e) const;//有序向量整体查找 void deduplicate();//无序剔除重复元素 void uniquify();//有序剔除重复元素 void show();&#125;; //复制数组区间template&lt;typename T&gt;void myVector&lt;T&gt;::copyFrom(T const *A,int lo,int hi)&#123; for(int i=lo;i&lt;hi;i++) _data[i-lo]=A[i]; _size=hi-lo+1;&#125;//空间不足时扩容template&lt;typename T&gt;void myVector&lt;T&gt;::expand()&#123; T* oldData=_data; _data=new T[_size&lt;&lt;1]; for(int i=0;i&lt;_size;i++) _data[i]=oldData[i]; _size&lt;&lt;=1; delete []oldData;&#125;//装填因子过小时压缩template&lt;typename T&gt;void myVector&lt;T&gt;::shrink()&#123; T* oldData=_data; _data=new T[_size&gt;&gt;=1]; for(int i=0;i&lt;_size;i++) _data[i]=oldData[i]; delete []oldData;&#125;template&lt;typename T&gt;myVector&lt;T&gt;::myVector(int size,T a):_size(size),_data(new T(size))&#123; for(int i=0;i&lt;_size;i++) _data[i]=a;&#125;template&lt;typename T&gt;myVector&lt;T&gt;::myVector(const myVector&lt;T&gt;&amp; mv)&#123; copyFrom(mv._data,0,mv._size);&#125;template&lt;typename T&gt;myVector&lt;T&gt;::myVector(const T *A,int lo,int hi)&#123; copyFrom(A,lo,hi);&#125;//报告向量当前的规模（元素总数） template&lt;typename T&gt;int myVector&lt;T&gt;::size() const&#123;return _size;&#125;//获取秩为r的元素 template&lt;typename T&gt;T myVector&lt;T&gt;::get(int r) const&#123;return _data[r];&#125;//用e替换秩为r元素的数值template&lt;typename T&gt;void myVector&lt;T&gt;::put(int r,T e)&#123;_data[r]=e;&#125;//插入元素template&lt;typename T&gt;void myVector&lt;T&gt;::insert(int r,T e)&#123; _size++; for(int i=_size;i&gt;r;i--) _data[i]=_data[i-1]; _data[r]=e; &#125;//删除秩为r的元素template&lt;typename T&gt;T myVector&lt;T&gt;::remove(int r)&#123; for(int i=r;i&lt;_size;i++) _data[i]=_data[i+1]; _size--;&#125;//删除秩在区间[lo, hi]之内的元素template&lt;typename T&gt;int myVector&lt;T&gt;::remove(int lo,int hi)&#123; for(int i=lo,j=hi+1;j&lt;_size;i++,j++) _data[i]=_data[j]; _size-=(hi-lo+1);&#125;//判断向量是否已排序template&lt;typename T&gt;bool myVector&lt;T&gt;::disortered() const&#123; for(int i=1;i&lt;_size;i++) if(_data[i]&gt;_data[i-1]) return false; return true;&#125; //调整各元素的位置，使之按非降序排列 template&lt;typename T&gt;void myVector&lt;T&gt;::sort()&#123; merge_sort(_data);&#125;//无序向量整体查找template&lt;typename T&gt;int myVector&lt;T&gt;::find(T e) const&#123; for(int i=0;i&lt;_size;i++) if(_data[i]==e) return i; return -1;&#125;//有序向量整体查找template&lt;typename T&gt;int myVector&lt;T&gt;::search(T e) const&#123; bin_search(_data,e);&#125;//无序剔除重复元素template&lt;typename T&gt;void myVector&lt;T&gt;::deduplicate()&#123; cout&lt;&lt;_size&lt;&lt;endl; for(int i=0;i&lt;_size-1;i++)&#123; for(int j=i+1;j&lt;_size;) if(_data[j]==_data[i]) remove(j); else j++; &#125; cout&lt;&lt;_size&lt;&lt;endl;&#125;//有序剔除重复元素template&lt;typename T&gt;void myVector&lt;T&gt;::uniquify()&#123; for(int i=0,j=0;j&lt;_size;j++) if(_data[j]!=_data[i]) _data[j]=_data[++i];&#125;template&lt;typename T&gt;void myVector&lt;T&gt;::show()&#123; for(int i=0;i&lt;_size;i++) cout&lt;&lt;_data[i]&lt;&lt;' '; cout&lt;&lt;endl;&#125;int main()&#123; myVector&lt;int&gt; mv; mv.insert(0,9); mv.show(); mv.insert(0,4); mv.show(); mv.insert(1,5); mv.show(); mv.put(1,2); mv.show(); cout&lt;&lt;mv.get(2)&lt;&lt;endl; mv.insert(3,6); mv.show(); mv.insert(1,7); mv.show(); mv.remove(2); mv.show(); mv.insert(1,3); mv.show(); mv.insert(3,4); mv.show(); cout&lt;&lt;mv.size()&lt;&lt;endl; cout&lt;&lt;mv.disortered()&lt;&lt;endl; cout&lt;&lt;mv.find(9)&lt;&lt;endl; cout&lt;&lt;mv.find(5)&lt;&lt;endl; cout&lt;&lt;mv.disortered()&lt;&lt;endl; mv.deduplicate(); mv.show();&#125; 结果如图：]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vector总结（二）]]></title>
    <url>%2Fpost%2F2ab8ca21.html</url>
    <content type="text"><![CDATA[数组的排序方法 插入排序 概念：插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n^2)，是稳定的排序方法。 代码实现： 1234567891011void insert_sort(vector&lt;int&gt;&amp; vec)&#123; int n=vec.size(); for(int i=1;i&lt;n;i++)&#123; int j=i-1,tg=vec[i]; while(j&gt;=0&amp;&amp;vec[j]&gt;tg)&#123; vec[j+1]=vec[j];//插入 j--; &#125; vec[j+1]=tg; &#125;&#125; 特点：从前往后迭代，从后往前移动（插入特点）。 递归形式： 12345678910111213141516void insert_sort(vector&lt;int&gt;&amp; vec,int n)&#123; if(n==0) return; else&#123; insert_sort(vec,n-1);//前（n-1）排序 insert(vec,n);//插入第n个 &#125;&#125;void insert(vector&lt;int&gt;&amp;vec,int n)&#123; int i=n-1,tg=vec[n]; while(i&gt;=0&amp;&amp;vec[i]&gt;tg)&#123; vec[i+1]=vec[i]; i--; &#125; vec[i+1]=tg;&#125; 归并排序 概念：将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序，是稳定的排序方法。 代码实现： 123456789101112131415161718192021222324void merge_sort(vector&lt;int&gt;&amp; vec,int l,int r)&#123; if(l&gt;=r) return; else&#123; int mi=(l+r)&gt;&gt;1; merge_sort(vec,l,mi); merge_sort(vec,mi+1,r); merge(vec,l,mi,r); &#125;&#125;void merge(vector&lt;int&gt;&amp;vec,int l,int mi,int r)&#123; int l1=mi-l+1,l2=r-mi; int *A=new int[l1]; for(int i=0;i&lt;l1;i++) A[i]=vec[l+i]; int *B=new int[l2]; for(int i=0;i&lt;l2;i++) B[i]=vec[mi+1+i];//亦可设置哨兵 for(int i=0,j=0,k=l;i&lt;l1||j&lt;l2;k++)&#123; if(j==l2||(i&lt;l1&amp;&amp;j&lt;l2&amp;&amp;A[i]&lt;=B[j])) vec[k]=A[i++]; else vec[k]=B[j++]; &#125; delete []A; delete []B;&#125; 特点：分治法，重在合。 时间复杂度：O(nlog n) 新增： 快速排序 概念：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序。 代码实现： 123456789101112131415161718void quicksort(vector&lt;int&gt;&amp; vec,int l,int r)&#123; if(l-r&lt;=1) return ; int mi=partition(vec,l,r);//查找端点 quicksort(vec,l,mi); quicksott(vec,mi+1,hi);&#125;int partition(vector&lt;int&gt; &amp;vec,int l,int r)&#123; int u=l; int pivot=vec[u]; while(l&lt;r)&#123; while(l&lt;r&amp;&amp;pivot&lt;=vec[r]) r--; if(l&lt;r) vec[l]=vec[r]; //找到比端点小的，就放到l处； while(l&lt;r&amp;&amp;vec[l]&lt;=pivot) l++; if(l&lt;r) vec[r]=vec[l]; //找到比端点值大的，就放到r处 &#125; vec[l]=pivot; return l;//返回端点&#125; 特点：分治法，重在分。 时间复杂度：O(nlog n) 冒泡排序改进特点：检测最后的逆序对的位置，减少循环次数，但时间复杂度还是O(n)。 代码实现： 1234567891011121314void bubble_sort(vector&lt;int&gt;&amp; vec)&#123; int last,hi; hi=vec.size(); last=0;//最后的逆序对位置 for(int i=0;i&lt;hi;i++)&#123; for(int j=0;j&lt;hi;j++) if(vec[j]&gt;vec[j+1])&#123; swap(vec[j],vec[j+1]); last=j; &#125; hi=last; &#125; &#125; 递归亦可实现。 选择排序改进 特点：每次循环找出最大和最小，使循环次数减半。 代码实现： 1234567891011121314151617181920void selet_sort(vector&lt;int&gt;&amp; vec)&#123; int maxi,mini; for(int i=0,k=vec.size()-1;i&lt;k;i++,k--)&#123; mini=i; maxi=k; for(int j=i;j&lt;=k;j++)&#123; if(vec[j]&gt;vec[maxi]) maxi=j; else if(vec[j]&lt;vec[mini]) mini=j; &#125; if(maxi==i&amp;&amp;mini==k) swap(vec[maxi],vec[mini]);// 若最大最小位置刚好相反，则只需交换一次。 else if(maxi==i)&#123; swap(vec[k],vec[maxi]); swap(vec[i],vec[mini]); //若最大位置为i，先交换最大。 &#125; else&#123; if(mini!=i) swap(vec[i],vec[mini]); if(maxi!=k) swap(vec[k],vec[maxi]); &#125; &#125;&#125; 注意特殊的几种情况。]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>数组</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vector总结（一）]]></title>
    <url>%2Fpost%2Fd907480.html</url>
    <content type="text"><![CDATA[总结vector的二分查找及其应用 接口：二分查找 基础 没找到返回-1： 123456789int bin_Search(vector &amp;vec,int target)&#123; int lo=-1,hi=vec.size(); while(lo + 1 != hi)&#123; int mi=(lo+hi)&gt;&gt;1; if(vec[mi]&lt;target) lo=mi; else hi=mi; &#125; return -1;&#125; 例题可参考: 457. 经典二分查找问题 拓展一 没有找到返回最大或返回最左边： 123456789int bin_Search(vector &amp;vec,int target)&#123; int lo=-1,hi=vec.size(); //若起始位置改变，算法也要变 while(lo + 1 != hi)&#123; int mi=(lo+hi)&gt;&gt;1; A[mi]&lt;target?lo=mi:hi=mi;//记忆法：相等时左右移 &#125; //return hi;返回最左边（即可插入处），记忆法：hi的取值范围 //return lo;返回最大（包含-1），记忆法：lo的取值范围&#125; 例题可参考： 60. 搜索插入位置 14. 二分查找 拓展二 返回最右边： 12345678int bin_Search(vector &amp;vec,int target)&#123; int lo=-1,hi=vec.size(); //若起始位置改变，算法也要变 while(lo + 1 != hi)&#123; int mi=(lo+hi)&gt;&gt;1; A[mi]&lt;=target?lo=mi:hi=mi;//记忆法：相等时左右移 &#125; return lo;//记忆法：lo的取值范围&#125; 例题可参考： 61. 搜索区间 进阶 旋转数组（如：45123）： 例题一：找到最小值 159. 寻找旋转排序数组中的最小值 12345678int bin_Search(vector &amp;vec)&#123; int lo=-1,hi=vec.size()-1; //若起始位置改变，算法也要变 while(lo + 1 != hi)&#123; int mi=(lo+hi)&gt;&gt;1; A[mi]&gt;A[hi]?lo=mi:hi=mi; &#125; return hi;&#125; 例题二： 找特定值 62. 搜索旋转排序数组 123456789101112131415161718int search(vector&lt;int&gt; &amp;A, int target) &#123; // write your code here if(A.size()==0) return -1; int lo=0,hi=A.size()-1; while(lo &lt;= hi)&#123; int mi=(lo+hi)&gt;&gt;1; if(A[mi]==target) return mi; if(A[mi]&lt;A[hi])&#123; if(target&gt;A[mi]&amp;&amp;target&lt;=A[hi]) lo=mi+1;//位置缩小 else hi=mi-1; &#125; else&#123; if(target&lt;A[mi]&amp;&amp;target&gt;=A[lo]) hi=mi-1;//位置缩小 else lo=mi+1; &#125; &#125; return -1;&#125; 总结 二分查找可用于有序或部分有序的数组，其形式多变，需根据初始条件和范围选择合适的形式。 12345678910111213141516171819202122232425//二分查找的三种形式：//1.左开右开&#123; lo=-1,hi=size(); while(lo + 1 != hi)&#123; ... [mi]&lt;target?lo=mi:hi=mi; &#125;&#125;//2.左闭右开&#123; lo=0,hi=size(); while(lo&lt;hi)&#123; ... [mi]&lt;target?lo=mi+1:hi=mi; &#125;&#125;//3.左闭右闭&#123; lo=0,hi=size()-1 while(lo&lt;=hi)&#123; ... [mi]&lt;target?lo=mi+1:hi=mi-1; &#125;&#125; 参考文献：二分查找 二分查找问题汇总]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown测试]]></title>
    <url>%2Fpost%2F45babedb.html</url>
    <content type="text"><![CDATA[简单介绍Typora的使用 typora快捷操作 快捷键 作用 快捷键 作用 Ctrl+1 一阶标题 Ctrl+B 字体加粗 Ctrl+2 二阶标题 Ctrl+I 字体倾斜 Ctrl+3 三阶标题 Ctrl+U 下划线 Ctrl+4 四阶标题 Ctrl+Home 返回Typora顶部 Ctrl+5 五阶标题 Ctrl+End 返回Typora底部 Ctrl+6 六阶标题 Ctrl+T 创建表格 Ctrl+L 选中某句话 Ctrl+K 创建超链接 Ctrl+D 选中某个单词 Ctrl+F 搜索 Ctrl+E 选中相同格式的文字 Ctrl+H 搜索并替换 Alt+Shift+5 删除线 Ctrl+Shift+I 插入图片 补充水平分割线（三个星） 引用（&gt; ） 与天奋斗，其乐无穷！与地奋斗，其乐无穷！与人奋斗，其乐无穷！———— 《毛泽东选集》之《奋斗自勉》（毛泽东1917年） 总结：typora是一个很好用的markdown编辑软件，今后我要尝试使用这个软件在github和微信公众号上发表博客，这将是我修行之路的开端。 2018/08/24另补充图片： 来源：《Markdown 实用指南》 作者：毕小烦]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>typora</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fpost%2F4a17b156.html</url>
    <content type="text"><![CDATA[the introduction of hexo Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
