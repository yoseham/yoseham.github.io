<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>myBlogs</title>
  
  <subtitle>knowledge is power</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-27T03:20:07.263Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yoseham</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vector总结（二）</title>
    <link href="http://yoursite.com/post/2ab8ca21.html"/>
    <id>http://yoursite.com/post/2ab8ca21.html</id>
    <published>2018-08-26T10:05:44.000Z</published>
    <updated>2018-08-27T03:20:07.263Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主题：数组的简单排序方法</p></blockquote><img src="/post/2ab8ca21/pg.jpg"><a id="more"></a><hr><h3 id="插入排序"><a href="#插入排序" class="headerlink" title=" 插入排序 "></a><span id="inline-red"> 插入排序 </span></h3><p>概念：插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n^2)，是稳定的排序方法。</p><p>代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=vec.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> j=i<span class="number">-1</span>,tg=vec[i];</span><br><span class="line">        <span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;vec[j]&gt;tg)&#123;</span><br><span class="line">            vec[j+<span class="number">1</span>]=vec[j];<span class="comment">//插入</span></span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        vec[j+<span class="number">1</span>]=tg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：从前往后迭代，从后往前移动（插入特点）。</p><p>递归形式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        insert_sort(vec,n<span class="number">-1</span>);<span class="comment">//前（n-1）排序</span></span><br><span class="line">        insert(vec,n);<span class="comment">//插入第n个</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;vec,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=n<span class="number">-1</span>,tg=vec[n];</span><br><span class="line">    <span class="keyword">while</span>(i&gt;=<span class="number">0</span>&amp;&amp;vec[i]&gt;tg)&#123;</span><br><span class="line">        vec[i+<span class="number">1</span>]=vec[i];</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    vec[i+<span class="number">1</span>]=tg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title=" 归并排序 "></a><span id="inline-red"> 归并排序 </span></h3><p>概念：将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序，是稳定的排序方法。</p><p>代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">int</span> mi=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">   merge_sort(vec,l,mi);</span><br><span class="line">   merge_sort(vec,mi+<span class="number">1</span>,r);</span><br><span class="line">    merge(vec,l,mi,r);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;vec,<span class="keyword">int</span> l,<span class="keyword">int</span> mi,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l1=mi-l+<span class="number">1</span>,l2=r-mi;</span><br><span class="line">    <span class="keyword">int</span> *A=<span class="keyword">new</span> <span class="keyword">int</span>[l1];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l1;i++)</span><br><span class="line">        A[i]=vec[l+i];</span><br><span class="line">    <span class="keyword">int</span> *B=<span class="keyword">new</span> <span class="keyword">int</span>[l2];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l2;i++)</span><br><span class="line">        B[i]=vec[mi+<span class="number">1</span>+i];<span class="comment">//亦可设置哨兵</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,k=l;i&lt;l1||j&lt;l2;k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==l2||(i&lt;l1&amp;&amp;j&lt;l2&amp;&amp;A[i]&lt;=B[j])) vec[k]=A[i++];</span><br><span class="line">        <span class="keyword">else</span> vec[k]=B[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> []A;</span><br><span class="line">    <span class="keyword">delete</span> []B;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：分治法</p><p>时间复杂度：O(nlog n)</p><h3 id="冒泡排序改进"><a href="#冒泡排序改进" class="headerlink" title=" 冒泡排序改进"></a><span id="inline-red"> 冒泡排序改进</span></h3><p>特点：检测最后的逆序对的位置，减少循环次数，但时间复杂度还是O(n)。</p><p>代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> last,hi;</span><br><span class="line">    hi=vec.size();</span><br><span class="line">    last=<span class="number">0</span>;<span class="comment">//最后的逆序对位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;hi;i++)&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;hi;j++)</span><br><span class="line">            <span class="keyword">if</span>(vec[j]&gt;vec[j+<span class="number">1</span>])&#123;</span><br><span class="line">                swap(vec[j],vec[j+<span class="number">1</span>]);</span><br><span class="line">                last=j;</span><br><span class="line">            &#125;</span><br><span class="line">         hi=last;   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归亦可实现。</p><h3 id="选择排序改进"><a href="#选择排序改进" class="headerlink" title=" 选择排序改进 "></a><span id="inline-red"> 选择排序改进 </span></h3><p>特点：每次循环找出最大和最小，使循环次数减半。</p><p>代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selet_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxi,mini;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,k=vec.size()<span class="number">-1</span>;i&lt;k;i++,k--)&#123;</span><br><span class="line">    mini=i;</span><br><span class="line">    maxi=k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=k;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vec[j]&gt;vec[maxi]) maxi=j;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(vec[j]&lt;vec[mini]) mini=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(maxi==i&amp;&amp;mini==k) swap(vec[maxi],vec[mini]);<span class="comment">// 若最大最小位置刚好相反，则只需交换一次。</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(maxi==i)&#123;</span><br><span class="line">swap(vec[k],vec[maxi]);</span><br><span class="line">swap(vec[i],vec[mini]);<span class="comment">//若最大位置为i，先交换最大。 </span></span><br><span class="line">&#125; </span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mini!=i) swap(vec[i],vec[mini]);</span><br><span class="line">        <span class="keyword">if</span>(maxi!=k) swap(vec[k],vec[maxi]); </span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意特殊的几种情况。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;主题：数组的简单排序方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&quot;/post/2ab8ca21/pg.jpg&quot;&gt;
    
    </summary>
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>vector总结（一）</title>
    <link href="http://yoursite.com/post/d907480.html"/>
    <id>http://yoursite.com/post/d907480.html</id>
    <published>2018-08-25T07:10:56.000Z</published>
    <updated>2018-08-27T03:41:25.845Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主题：总结vector的二分查找及其应用</p></blockquote><img src="/post/d907480/th.jpg" title="查找"><a id="more"></a><hr><h2 id="接口：二分查找"><a href="#接口：二分查找" class="headerlink" title="  接口：二分查找  "></a><span id="inline-red">  接口：二分查找  </span></h2><h4 id="基础"><a href="#基础" class="headerlink" title=" 基础 "></a><span id="inline-green"> 基础 </span></h4><p>没找到返回-1：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bin_Search</span><span class="params">(<span class="built_in">vector</span> &amp;vec,<span class="keyword">int</span> target)</span></span>&#123; </span><br><span class="line"><span class="keyword">int</span> lo=<span class="number">-1</span>,hi=vec.size();</span><br><span class="line"><span class="keyword">while</span>(lo + <span class="number">1</span> != hi)&#123;</span><br><span class="line"><span class="keyword">int</span> mi=(lo+hi)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(vec[mi]&lt;target) lo=mi;</span><br><span class="line"><span class="keyword">else</span> hi=mi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题可参考:  <a href="https://www.lintcode.com/problem/classical-binary-search/description" target="_blank" rel="noopener">457. 经典二分查找问题</a></p><h4 id="拓展一"><a href="#拓展一" class="headerlink" title=" 拓展一 "></a><span id="inline-purple"> 拓展一 </span></h4><p> 没有找到返回最大或返回最左边：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bin_Search</span><span class="params">(<span class="built_in">vector</span> &amp;vec,<span class="keyword">int</span> target)</span></span>&#123; </span><br><span class="line"><span class="keyword">int</span> lo=<span class="number">-1</span>,hi=vec.size();<span class="comment">//若起始位置改变，算法也要变</span></span><br><span class="line"><span class="keyword">while</span>(lo + <span class="number">1</span> != hi)&#123;</span><br><span class="line"><span class="keyword">int</span> mi=(lo+hi)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">A[mi]&lt;target?lo=mi:hi=mi;<span class="comment">//记忆法：相等时左右移</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//return hi;返回最左边（即可插入处），记忆法：hi的取值范围</span></span><br><span class="line"><span class="comment">//return lo;返回最大（包含-1），记忆法：lo的取值范围</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题可参考：</p><p> <a href="https://www.lintcode.com/problem/search-insert-position/description" target="_blank" rel="noopener">60. 搜索插入位置</a></p><p><a href="https://www.lintcode.com/problem/first-position-of-target/description" target="_blank" rel="noopener">14. 二分查找</a> </p><h4 id="拓展二"><a href="#拓展二" class="headerlink" title=" 拓展二 "></a><span id="inline-purple"> 拓展二 </span></h4><p>返回最右边：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bin_Search</span><span class="params">(<span class="built_in">vector</span> &amp;vec,<span class="keyword">int</span> target)</span></span>&#123; </span><br><span class="line"><span class="keyword">int</span> lo=<span class="number">-1</span>,hi=vec.size();<span class="comment">//若起始位置改变，算法也要变</span></span><br><span class="line"><span class="keyword">while</span>(lo + <span class="number">1</span> != hi)&#123;</span><br><span class="line"><span class="keyword">int</span> mi=(lo+hi)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">A[mi]&lt;=target?lo=mi:hi=mi;<span class="comment">//记忆法：相等时左右移</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lo;<span class="comment">//记忆法：lo的取值范围</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题可参考：</p><p><a href="https://www.lintcode.com/problem/search-for-a-range/description" target="_blank" rel="noopener">61. 搜索区间</a></p><h4 id="进阶"><a href="#进阶" class="headerlink" title=" 进阶 "></a><span id="inline-blue"> 进阶 </span></h4><p>旋转数组<em>（如：45123）</em>：</p><p>例题一：找到最小值</p><p><a href="https://www.lintcode.com/problem/find-minimum-in-rotated-sorted-array/description" target="_blank" rel="noopener">159. 寻找旋转排序数组中的最小值</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bin_Search</span><span class="params">(<span class="built_in">vector</span> &amp;vec)</span></span>&#123; </span><br><span class="line"><span class="keyword">int</span> lo=<span class="number">-1</span>,hi=vec.size()<span class="number">-1</span>; <span class="comment">//若起始位置改变，算法也要变</span></span><br><span class="line"><span class="keyword">while</span>(lo + <span class="number">1</span> != hi)&#123;</span><br><span class="line"><span class="keyword">int</span> mi=(lo+hi)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">A[mi]&gt;A[hi]?lo=mi:hi=mi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> hi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题二： 找特定值</p><p><a href="https://www.lintcode.com/problem/search-in-rotated-sorted-array/description" target="_blank" rel="noopener">62. 搜索旋转排序数组</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write your code here</span></span><br><span class="line">    <span class="keyword">if</span>(A.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> lo=<span class="number">0</span>,hi=A.size()<span class="number">-1</span>; </span><br><span class="line"><span class="keyword">while</span>(lo &lt;= hi)&#123;</span><br><span class="line"><span class="keyword">int</span> mi=(lo+hi)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(A[mi]==target) <span class="keyword">return</span> mi;</span><br><span class="line">        <span class="keyword">if</span>(A[mi]&lt;A[hi])&#123;</span><br><span class="line">            <span class="keyword">if</span>(target&gt;A[mi]&amp;&amp;target&lt;=A[hi]) lo=mi+<span class="number">1</span>;<span class="comment">//位置缩小</span></span><br><span class="line">            <span class="keyword">else</span> hi=mi<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(target&lt;A[mi]&amp;&amp;target&gt;=A[lo]) hi=mi<span class="number">-1</span>;<span class="comment">//位置缩小</span></span><br><span class="line">            <span class="keyword">else</span> lo=mi+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/post/d907480/search.jpg" title="search"><h4 id="总结"><a href="#总结" class="headerlink" title=" 总结 "></a><span id="inline-yellow"> 总结 </span></h4><p>二分查找可用于有序或部分有序的数组，其形式多变，需根据初始条件和范围选择合适的形式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二分查找的三种形式：</span></span><br><span class="line"><span class="comment">//1.左开右开</span></span><br><span class="line">&#123;</span><br><span class="line">    lo=<span class="number">-1</span>,hi=size();</span><br><span class="line">    <span class="keyword">while</span>(lo + <span class="number">1</span> != hi)&#123;</span><br><span class="line">        ...</span><br><span class="line">        [mi]&lt;target?lo=mi:hi=mi;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.左闭右开</span></span><br><span class="line">&#123;</span><br><span class="line">    lo=<span class="number">0</span>,hi=size();</span><br><span class="line">    <span class="keyword">while</span>(lo&lt;hi)&#123;</span><br><span class="line">        ...</span><br><span class="line">        [mi]&lt;target?lo=mi+<span class="number">1</span>:hi=mi;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.左闭右闭</span></span><br><span class="line">&#123;</span><br><span class="line">    lo=<span class="number">0</span>,hi=size()<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span>(lo&lt;=hi)&#123;</span><br><span class="line">            ...</span><br><span class="line">            [mi]&lt;target?lo=mi+<span class="number">1</span>:hi=mi<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文献：<a href="https://blog.csdn.net/u012879957/article/details/81205567" target="_blank" rel="noopener">二分查找</a></p><p><a href="https://blog.csdn.net/SunnyYoona/article/details/42406497" target="_blank" rel="noopener">二分查找问题汇总</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;主题：总结vector的二分查找及其应用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&quot;/post/d907480/th.jpg&quot; title=&quot;查找&quot;&gt;
    
    </summary>
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Markdown测试</title>
    <link href="http://yoursite.com/post/45babedb.html"/>
    <id>http://yoursite.com/post/45babedb.html</id>
    <published>2018-08-24T12:09:00.000Z</published>
    <updated>2018-08-27T03:41:24.313Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主题：简单介绍Typora的使用 </p></blockquote><p><img src="https://dl2.macupdate.com/images/icons256/52992.png?d=1479658505" alt=" typora "></p><a id="more"></a><hr><h3 id="typora快捷操作"><a href="#typora快捷操作" class="headerlink" title="typora快捷操作"></a>typora快捷操作</h3><table><thead><tr><th>快捷键</th><th>作用</th><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>Ctrl+1</td><td>一阶标题</td><td>Ctrl+B</td><td>字体加粗</td></tr><tr><td>Ctrl+2</td><td>二阶标题</td><td>Ctrl+I</td><td>字体倾斜</td></tr><tr><td>Ctrl+3</td><td>三阶标题</td><td>Ctrl+U</td><td>下划线</td></tr><tr><td>Ctrl+4</td><td>四阶标题</td><td>Ctrl+Home</td><td>返回Typora顶部</td></tr><tr><td>Ctrl+5</td><td>五阶标题</td><td>Ctrl+End</td><td>返回Typora底部</td></tr><tr><td>Ctrl+6</td><td>六阶标题</td><td>Ctrl+T</td><td>创建表格</td></tr><tr><td>Ctrl+L</td><td>选中某句话</td><td>Ctrl+K</td><td>创建超链接</td></tr><tr><td>Ctrl+D</td><td>选中某个单词</td><td>Ctrl+F</td><td>搜索</td></tr><tr><td>Ctrl+E</td><td>选中相同格式的文字</td><td>Ctrl+H</td><td>搜索并替换</td></tr><tr><td>Alt+Shift+5</td><td>删除线</td><td>Ctrl+Shift+I</td><td>插入图片</td></tr></tbody></table><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>水平分割线（三个星）</p><hr><p>引用（&gt; ）</p><blockquote><p>与天奋斗，其乐无穷！与地奋斗，其乐无穷！与人奋斗，其乐无穷！<br>———— 《毛泽东选集》之《奋斗自勉》（毛泽东1917年）</p></blockquote><h6 id="总结：typora是一个很好用的markdown编辑软件，今后我要尝试使用这个软件在github和微信公众号上发表博客，这将是我修行之路的开端。-2018-08-24"><a href="#总结：typora是一个很好用的markdown编辑软件，今后我要尝试使用这个软件在github和微信公众号上发表博客，这将是我修行之路的开端。-2018-08-24" class="headerlink" title="总结：typora是一个很好用的markdown编辑软件，今后我要尝试使用这个软件在github和微信公众号上发表博客，这将是我修行之路的开端。  2018/08/24"></a>总结：typora是一个很好用的markdown编辑软件，今后我要尝试使用这个软件在github和微信公众号上发表博客，这将是我修行之路的开端。  2018/08/24</h6><p>另补充图片：<img src="/post/45babedb/pg1.png" title="图一"><br><img src="/post/45babedb/pg2.png" title="图二"></p><p>来源：<a href="https://yuedu.baidu.com/ebook/f2ec7e699a6648d7c1c708a1284ac850ad020418" target="_blank" rel="noopener">《Markdown 实用指南》</a> 作者：毕小烦</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;主题：简单介绍Typora的使用 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://dl2.macupdate.com/images/icons256/52992.png?d=1479658505&quot; alt=&quot; typora &quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="typora" scheme="http://yoursite.com/tags/typora/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/post/4a17b156.html"/>
    <id>http://yoursite.com/post/4a17b156.html</id>
    <published>2018-08-24T04:04:25.290Z</published>
    <updated>2018-08-26T00:30:11.743Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> title : the  introduction  of  hexo</p></blockquote><a id="more"></a><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; title : the  introduction  of  hexo&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
